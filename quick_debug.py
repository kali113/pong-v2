#!/usr/bin/env python3
"""
Quick Debug Script for Pong AI V2
Script de Depuraci√≥n R√°pida para Pong AI V2

Run this script for instant diagnosis of common issues.
Ejecuta este script para un diagn√≥stico instant√°neo de problemas comunes.
"""

import sys
import os
from pathlib import Path

# Set headless mode / Establecer modo sin cabeza
os.environ['SDL_VIDEODRIVER'] = 'dummy'
os.environ['SDL_AUDIODRIVER'] = 'dummy'

def print_header(text):
    """Print section header / Imprimir encabezado de secci√≥n"""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70)

def check_python_version():
    """Check Python version / Verificar versi√≥n de Python"""
    print_header("PYTHON VERSION / VERSI√ìN DE PYTHON")
    version = sys.version_info
    print(f"Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 10):
        print("‚ö† WARNING: Python 3.10+ recommended")
        print("‚ö† ADVERTENCIA: Se recomienda Python 3.10+")
        return False
    else:
        print("‚úì Python version OK")
        return True

def check_dependencies():
    """Check required dependencies / Verificar dependencias requeridas"""
    print_header("DEPENDENCIES / DEPENDENCIAS")
    
    deps = [
        ('pygame', 'pygame', True),
        ('numpy', 'numpy', True),
        ('PIL', 'Pillow', False),
    ]
    
    all_ok = True
    for module, package, required in deps:
        try:
            mod = __import__(module)
            version = getattr(mod, '__version__', 'unknown')
            status = "‚úì" if required else "‚äô"
            print(f"{status} {package}: {version}")
        except ImportError:
            if required:
                print(f"‚úó {package}: NOT INSTALLED (required)")
                all_ok = False
            else:
                print(f"‚äô {package}: not installed (optional)")
    
    return all_ok

def check_files():
    """Check required files exist / Verificar que existan archivos requeridos"""
    print_header("PROJECT FILES / ARCHIVOS DEL PROYECTO")
    
    files = [
        ('main.py', True),
        ('main_web.py', True),
        ('requirements.txt', True),
        ('debug_config.py', False),
        ('test_suite.py', False),
        ('README.md', True),
    ]
    
    all_ok = True
    for file, required in files:
        if Path(file).exists():
            size = Path(file).stat().st_size
            print(f"‚úì {file} ({size:,} bytes)")
        else:
            status = "‚úó" if required else "‚äô"
            print(f"{status} {file}: not found")
            if required:
                all_ok = False
    
    return all_ok

def test_imports():
    """Test critical imports / Probar importaciones cr√≠ticas"""
    print_header("IMPORT TEST / PRUEBA DE IMPORTACI√ìN")
    
    try:
        import main
        print(f"‚úì main.py imports successfully (v{main.__version__})")
        return True
    except Exception as e:
        print(f"‚úó Failed to import main.py: {e}")
        return False

def test_basic_functionality():
    """Test basic game components / Probar componentes b√°sicos del juego"""
    print_header("FUNCTIONALITY TEST / PRUEBA DE FUNCIONALIDAD")
    
    try:
        import main
        
        # Test settings
        settings = main.load_settings()
        print(f"‚úì Settings system: {len(settings)} settings loaded")
        
        # Test particle pool
        pool = main.ParticlePool(10)
        p = pool.acquire()
        pool.release(p)
        print("‚úì Particle system: OK")
        
        # Test ball
        ball = main.Ball()
        ball.move(0.016)
        print("‚úì Ball physics: OK")
        
        # Test paddle
        paddle = main.Paddle(50, 300, (255, 255, 255))
        paddle.move(1.0, 0.016)
        print("‚úì Paddle movement: OK")
        
        return True
        
    except Exception as e:
        print(f"‚úó Functionality test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_test_suite():
    """Run full test suite if available / Ejecutar suite completa si est√° disponible"""
    print_header("RUNNING TEST SUITE / EJECUTANDO SUITE DE PRUEBAS")
    
    if not Path('test_suite.py').exists():
        print("‚äô Test suite not found (optional)")
        return True
    
    try:
        import test_suite
        result = test_suite.run_all_tests()
        return result == 0
    except Exception as e:
        print(f"‚ö† Test suite error: {e}")
        return False

def check_permissions():
    """Check file permissions / Verificar permisos de archivo"""
    print_header("PERMISSIONS / PERMISOS")
    
    # Check write permission in home directory
    settings_file = Path.home() / '.pong_ai_test_write'
    try:
        settings_file.write_text("test")
        settings_file.unlink()
        print("‚úì Home directory writable")
        return True
    except Exception as e:
        print(f"‚úó Cannot write to home directory: {e}")
        return False

def check_display():
    """Check display availability / Verificar disponibilidad de display"""
    print_header("DISPLAY / PANTALLA")
    
    # Already in headless mode for this script
    print("‚äô Running in headless mode for testing")
    
    try:
        import pygame
        # Try to get video info
        info = pygame.display.Info()
        print(f"‚úì Display driver: {pygame.display.get_driver()}")
        return True
    except Exception as e:
        print(f"‚ö† Display check: {e}")
        print("  (This is normal in headless environments)")
        return True

def provide_recommendations(results):
    """Provide recommendations based on results / Proporcionar recomendaciones basadas en resultados"""
    print_header("RECOMMENDATIONS / RECOMENDACIONES")
    
    failed_checks = [name for name, status in results.items() if not status]
    
    if not failed_checks:
        print("‚úì ALL CHECKS PASSED!")
        print("‚úì ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("\nYour installation appears to be working correctly.")
        print("Tu instalaci√≥n parece estar funcionando correctamente.")
        print("\nYou can run the game with:")
        print("Puedes ejecutar el juego con:")
        print("  python main.py")
        return
    
    print("Some issues were detected. Here's what to do:")
    print("Se detectaron algunos problemas. Aqu√≠ est√° qu√© hacer:")
    print()
    
    if 'dependencies' in failed_checks:
        print("üì¶ DEPENDENCIES / DEPENDENCIAS:")
        print("   Install missing packages:")
        print("   Instalar paquetes faltantes:")
        print("   pip install -r requirements.txt")
        print()
    
    if 'python_version' in failed_checks:
        print("üêç PYTHON VERSION / VERSI√ìN DE PYTHON:")
        print("   Update to Python 3.10 or newer")
        print("   Actualizar a Python 3.10 o m√°s nuevo")
        print("   Download from: https://www.python.org/downloads/")
        print()
    
    if 'files' in failed_checks:
        print("üìÅ PROJECT FILES / ARCHIVOS DEL PROYECTO:")
        print("   Make sure you're in the correct directory")
        print("   Aseg√∫rate de estar en el directorio correcto")
        print("   cd /path/to/pong-v2")
        print()
    
    if 'imports' in failed_checks:
        print("‚ö† IMPORTS / IMPORTACIONES:")
        print("   Check for syntax errors:")
        print("   Verificar errores de sintaxis:")
        print("   python -m py_compile main.py")
        print()
    
    if 'permissions' in failed_checks:
        print("üîí PERMISSIONS / PERMISOS:")
        print("   Check file system permissions")
        print("   Verificar permisos del sistema de archivos")
        print()

def main():
    """
    Main diagnostic function.
    Funci√≥n principal de diagn√≥stico.
    """
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                  ‚ïë
‚ïë              PONG AI V2 - QUICK DIAGNOSTICS                      ‚ïë
‚ïë              PONG AI V2 - DIAGN√ìSTICO R√ÅPIDO                     ‚ïë
‚ïë                                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")
    
    # Run all checks / Ejecutar todas las verificaciones
    results = {
        'python_version': check_python_version(),
        'dependencies': check_dependencies(),
        'files': check_files(),
        'imports': test_imports(),
        'functionality': test_basic_functionality(),
        'permissions': check_permissions(),
        'display': check_display(),
    }
    
    # Summary / Resumen
    print_header("SUMMARY / RESUMEN")
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    
    print(f"Checks passed: {passed}/{total}")
    print(f"Verificaciones pasadas: {passed}/{total}")
    
    if passed == total:
        print("\n‚úì STATUS: HEALTHY / ESTADO: SALUDABLE")
    else:
        print(f"\n‚ö† STATUS: {total - passed} ISSUES FOUND / {total - passed} PROBLEMAS ENCONTRADOS")
    
    # Recommendations / Recomendaciones
    provide_recommendations(results)
    
    print("\n" + "=" * 70)
    print("For more detailed debugging, see DEBUGGING.md")
    print("Para depuraci√≥n m√°s detallada, ver DEBUGGING.md")
    print("=" * 70 + "\n")
    
    return 0 if passed == total else 1

if __name__ == "__main__":
    sys.exit(main())
