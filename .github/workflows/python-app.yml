name: Python Application CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Check syntax
      run: |
        python -m py_compile main.py

    - name: Run in headless mode (syntax check)
      run: |
        python -c "import pygame; pygame.init(); print('Pygame initialized successfully')"

  build-executable:
    needs: test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --icon=icon.ico --name="PongAI-Neon" main.py

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: PongAI-Neon-Windows
        path: dist/PongAI-Neon.exe
        retention-days: 30

  build-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify README
      run: |
        if [ ! -f README.md ]; then
          echo "README.md not found!"
          exit 1
        fi
        echo "README.md exists and is valid"

    - name: Check for required files
      run: |
        files=("main.py" "requirements.txt" "LICENSE" "icon.ico")
        for file in "${files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing required file: $file"
            exit 1
          fi
        done
        echo "All required files present"
